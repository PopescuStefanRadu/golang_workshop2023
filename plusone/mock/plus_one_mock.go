// Code generated by MockGen. DO NOT EDIT.
// Source: plus_one.go
//
// Generated by this command:
//
//	mockgen -source=plus_one.go -destination=./mock/plus_one_mock.go
//
// Package mock_plusone is a generated GoMock package.
package mock_plusone

import (
	plusone "esol/plusone"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// FindCarByVIN mocks base method.
func (m *MockDbRepo) FindCarByVIN(vin string) plusone.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCarByVIN", vin)
	ret0, _ := ret[0].(plusone.Car)
	return ret0
}

// FindCarByVIN indicates an expected call of FindCarByVIN.
func (mr *MockDbRepoMockRecorder) FindCarByVIN(vin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCarByVIN", reflect.TypeOf((*MockDbRepo)(nil).FindCarByVIN), vin)
}

// GetNumber mocks base method.
func (m *MockDbRepo) GetNumber() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumber")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNumber indicates an expected call of GetNumber.
func (mr *MockDbRepoMockRecorder) GetNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumber", reflect.TypeOf((*MockDbRepo)(nil).GetNumber))
}

// UpdateCar mocks base method.
func (m *MockDbRepo) UpdateCar(arg0 plusone.Car) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCar", arg0)
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockDbRepoMockRecorder) UpdateCar(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockDbRepo)(nil).UpdateCar), arg0)
}

// MockSomethingThatTakesFunctionality is a mock of SomethingThatTakesFunctionality interface.
type MockSomethingThatTakesFunctionality struct {
	ctrl     *gomock.Controller
	recorder *MockSomethingThatTakesFunctionalityMockRecorder
}

// MockSomethingThatTakesFunctionalityMockRecorder is the mock recorder for MockSomethingThatTakesFunctionality.
type MockSomethingThatTakesFunctionalityMockRecorder struct {
	mock *MockSomethingThatTakesFunctionality
}

// NewMockSomethingThatTakesFunctionality creates a new mock instance.
func NewMockSomethingThatTakesFunctionality(ctrl *gomock.Controller) *MockSomethingThatTakesFunctionality {
	mock := &MockSomethingThatTakesFunctionality{ctrl: ctrl}
	mock.recorder = &MockSomethingThatTakesFunctionalityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSomethingThatTakesFunctionality) EXPECT() *MockSomethingThatTakesFunctionalityMockRecorder {
	return m.recorder
}

// DoSomething mocks base method.
func (m *MockSomethingThatTakesFunctionality) DoSomething(vin string, doSthWith func(string)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoSomething", vin, doSthWith)
}

// DoSomething indicates an expected call of DoSomething.
func (mr *MockSomethingThatTakesFunctionalityMockRecorder) DoSomething(vin, doSthWith any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSomething", reflect.TypeOf((*MockSomethingThatTakesFunctionality)(nil).DoSomething), vin, doSthWith)
}
